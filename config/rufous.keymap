/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF_L 0
#define NAV_L 1
#define UPP_L 2
#define SYM_L 3
#define NUM_L 4
#define SYS_L 5

#define B0     BT_SEL 0
#define B1     BT_SEL 1
#define B2     BT_SEL 2
#define B3     BT_SEL 3
#define B4     BT_SEL 4
#define OTGL   out OUT_TOG

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&sk {
  release-after-ms = <60000>;
};

/ {
    ZMK_MACRO(mo_nav,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo NAV_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo NAV_L>;)

    ZMK_MACRO(mo_upp,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo UPP_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo UPP_L>;)

    ZMK_MACRO(mo_sym,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo SYM_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo SYM_L>;)

    ZMK_MACRO(mo_sys,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo SYS_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo SYS_L>;)

    ZMK_MACRO(leq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LT &kp EQUAL>;)

    ZMK_MACRO(eq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL &kp EQUAL>;)

    ZMK_MACRO(geq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp GT &kp EQUAL>;)

    ZMK_MACRO(neq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EXCL &kp EQUAL>;)

    ZMK_MACRO(arrwf,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL &kp GT>;)

    ZMK_MACRO(wclip,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings
        = <&macro_press &kp LGUI>
        , <&macro_press &kp LSHFT>
        , <&macro_press &kp S>
        , <&macro_release &kp LGUI &kp LSHFT &kp S>;)

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
          combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
          };
        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 | |  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │     20  21  22     │ │     23  24  25     │
          ╰───────────╮ 26  27 │ │ 28  89 ╭───────────╯
                      ╰────────╯ ╰────────╯            */
        // Letters
        COMBO(lower_z, &kp Z, 20 21, DEF_L)
        COMBO(upper_z, &kp LS(Z), 20 21, UPP_L)

        COMBO(lower_p, &kp P, 21 22, DEF_L)
        COMBO(upper_p, &kp LS(P), 21 22, UPP_L)

        COMBO(lower_sqt, &kp SQT, 23 24, DEF_L)
        COMBO(upper_sqt, &kp LS(SQT), 23 24, UPP_L)

        COMBO(lower_comma, &kp COMMA, 24 25, DEF_L)
        COMBO(upper_comma, &kp LS(COMMA), 24 25, UPP_L)

        COMBO(equal, &kp EQUAL, 21 22, SYM_L)

        COMBO(f_eight, &kp F8, 24 25, SYS_L)

        // Brackets
        COMBO(left_bracket, &kp LBKT, 1 11, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_bracket, &kp RBKT, 8 18, DEF_L UPP_L SYM_L NUM_L)
        COMBO(left_parenthesis, &kp LPAR, 2 12, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_parenthesis, &kp RPAR, 7 17, DEF_L UPP_L SYM_L NUM_L)
        COMBO(left_brace, &kp LBRC, 3 13, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_brace, &kp RBRC, 6 16, DEF_L UPP_L SYM_L NUM_L)

        // Convenience
        COMBO(esc, &kp ESC, 2 3, DEF_L)
        COMBO(ent, &kp ENTER, 17 18, DEF_L)
        COMBO(tab, &kp TAB, 13 14, DEF_L)
        COMBO(w_clip, &wclip, 11 12 13, DEF_L)

        COMBO(sys_l, &mo_sys, 26 27, NUM_L)
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <UPP_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp V         &kp L         &kp H         &kp G         &kp K             &kp Q         &kp F         &kp O         &kp U         &kp J
             &kp S         &kp R         &kp N         &kp T         &kp B             &kp Y         &kp C         &kp A         &kp E         &kp I
                           &kp X         &kp M         &kp D                                         &kp W         &kp DOT       &kp SEMI
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &mo_nav       &kp SPACE         &mo_upp       &mo_sym
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &trans        &trans        &trans        &trans        &trans            &kp PG_UP     &trans        &trans        &trans        &trans
             &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     &trans            &kp PG_DN     &kp LARW      &kp DARW      &kp UARW      &kp RARW
                           &kp LC(X)     &kp LC(C)     &kp LC(V)                                     &trans        &trans        &trans
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &trans        &trans            &kp BSPC      &kp DEL
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        upper_layer {
            label = "Upp";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp LS(V)     &kp LS(L)     &kp LS(H)     &kp LS(G)     &kp LS(K)         &kp LS(Q)     &kp LS(F)     &kp LS(O)     &kp LS(U)     &kp LS(J)
             &kp LS(S)     &kp LS(R)     &kp LS(N)     &kp LS(T)     &kp LS(B)         &kp LS(Y)     &kp LS(C)     &kp LS(A)     &kp LS(E)     &kp LS(I)
                           &kp LS(X)     &kp LS(M)     &kp LS(D)                                     &kp LS(W)     &kp LS(DOT)   &kp LS(SEMI)
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &mo_nav       &kp LS(SPACE)         &mo_upp       &mo_sym
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT         &neq          &leq          &eq           &geq          &none
             &kp COLON     &kp CARET     &kp AMPS      &kp STAR      &kp PLUS          &arrwf        &none         &none         &none         &kp PIPE
                           &kp GRAVE     &kp TILDE     &kp BSLH                                      &none         &none         &none
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &kp UNDER     &kp MINUS         &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &none         &kp N7        &kp N8        &kp N9        &none             &none         &none         &none         &none         &none
             &none         &kp N1        &kp N2        &kp N3        &none             &none         &none         &none         &none         &none
                           &kp N4        &kp N5        &kp N6                                        &none         &kp COMMA     &kp DOT
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &kp N0        &kp SPACE         &none         &none
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        sys_layer {
            label = "Sys";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &none         &OTGL         &none         &none         &none             &none         &kp F9        &kp F10       &kp F11       &kp F12
             &none         &bt B0        &bt B1        &bt B2        &none             &none         &kp F1        &kp F2        &kp F3        &kp F4
                           &bt B3        &bt B4        &none                                         &kp F5        &kp F6        &kp F7
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &none         &none             &none         &none
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };
    };
};
