/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define UPP_L 2
#define SYM_L 3
#define NUM_L 4

/* Behavior Settings */
&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&sk {
  release-after-ms = <60000>;
};

/ {
    ZMK_MACRO(mo_nav,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo NAV_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo NAV_L>;)

    ZMK_MACRO(mo_upp,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo UPP_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo UPP_L>;)

           ZMK_MACRO(leq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LT &kp EQUAL>;)

    ZMK_MACRO(eq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EQUAL &kp EQUAL>;)

    ZMK_MACRO(geq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp GT &kp EQUAL>;)

    ZMK_MACRO(neq,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp EXCL &kp EQUAL>;)

    ZMK_MACRO(arrow,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp MINUS &kp GT>;)

    ZMK_MACRO(hop,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp SPACE &kp H &kp LS(C)>;)

    ZMK_MACRO(mo_sym,
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
        = <&macro_tap &kp K_CANCEL>
        , <&macro_press &mo SYM_L>
        , <&macro_pause_for_release>
        , <&macro_release &mo SYM_L>;)

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
          combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │     20  21  22     │ │     23  24  25     │
          ╰───────────╮ 26  27 │ │ 28  29 ╭───────────╯
                      ╰────────╯ ╰────────╯            */

         /* Letters */
        COMBO(lower_v, &kp V, 21 22, DEF_L)
        COMBO(lower_x, &kp X, 23 24, DEF_L)
        COMBO(lower_z, &kp Z, 24 25, DEF_L)
        COMBO(forward_slash, &kp FSLH, 20 21, DEF_L)
        COMBO(upper_v, &kp LS(V), 21 22, UPP_L)
        COMBO(upper_x, &kp LS(X), 23 24, UPP_L)
        COMBO(upper_z, &kp LS(Z), 24 25, UPP_L)
        COMBO(question_mark, &kp LS(FSLH), 20 21, UPP_L)
        
        /* Brackets */
        COMBO(left_bracket, &kp LBKT, 1 11, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_bracket, &kp RBKT, 8 18, DEF_L UPP_L SYM_L NUM_L)
        COMBO(left_parenthesis, &kp LPAR, 2 12, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_parenthesis, &kp RPAR, 7 17, DEF_L UPP_L SYM_L NUM_L)
        COMBO(left_brace, &kp LBRC, 3 13, DEF_L UPP_L SYM_L NUM_L)
        COMBO(right_brace, &kp RBRC, 6 16, DEF_L UPP_L SYM_L NUM_L)

        /* Convenience */
        COMBO(esc, &kp ESC, 2 3, DEF_L)
        COMBO(ent, &kp ENTER, 17 18, DEF_L)
        COMBO(del, &kp DEL, 15 16, DEF_L)
        COMBO(tab, &kp TAB, 13 14, DEF_L)
        COMBO(select_all, &kp LC(A), 20 21, NAV_L)
        COMBO(tmux_prefix, &kp LC(A), 23 25, DEF_L)

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <UPP_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp J         &kp P         &kp U         &kp O         &kp K             &kp B         &kp D         &kp R         &kp F         &kp Q
             &kp W         &kp I         &kp E         &kp A         &kp DOT           &kp G         &kp T         &kp N         &kp S         &kp H
                           &kp Y         &kp QUOT      &kp COMMA                                     &kp M         &kp L         &kp C
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &mo_nav       &kp SPACE         &mo_upp       &mo_sym
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯

            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &none         &kp N0        &kp LC(O)     &kp HOME      &hop              &kp PG_UP     &kp END       &kp LC(I)     &kp DLLR      &caps_word
             &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT     &kp LC(Z)         &kp PG_DN     &kp LARW      &kp DARW      &kp UARW      &kp RARW
                           &kp LC(X)     &kp LC(C)     &kp LC(V)                                     &kp TAB       &kp LS(TAB)   &key_repeat
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &trans        &trans            &kp BSPC      &kp DEL
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        upper_layer {
            label = "Upp";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp LS(J)     &kp LS(P)     &kp LS(U)     &kp LS(O)     &kp LS(K)         &kp LS(B)     &kp LS(D)     &kp LS(R)     &kp LS(F)     &kp LS(Q)
             &kp LS(W)     &kp LS(I)     &kp LS(E)     &kp LS(A)     &kp GT            &kp LS(G)     &kp LS(T)     &kp LS(N)     &kp LS(S)     &kp LS(H)
                           &kp LS(Y)     &kp DQT       &kp LT                                        &kp LS(M)     &kp LS(L)     &kp LS(C)
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &trans        &kp LS(SPACE)     &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &kp SEMI      &kp AMPS      &kp ASTRK     &kp BSLH      &kp PLUS           &neq          &leq          &eq           &geq          &arrow
             &kp COLON     &kp DLLR      &kp PRCNT     &kp CARET     &kp EQUAL          &none         &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI
                           &kp EXCL      &kp AT        &kp POUND                                      &kp LT        &kp PIPE      &kp GT
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &kp UNDER      &kp MINUS         &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
             &none         &kp N7        &kp N4        &kp N3        &kp PLUS          &kp K        &kp W         &kp B         &kp G         &kp Y
             &kp GRAVE     &kp N2        &kp N1        &kp N0        &kp EQUAL         &kp J        &sk LSHFT     &sk LCTRL     &sk LALT      &sk LGUI
                           &kp N8        &kp N6        &kp N5                                       &kp D         &none         &none
        // ╰─────────────┴─────────────┴─────────────╮                                                           ╭─────────────┴─────────────┴─────────────╯
                                                       &kp N9        &kp MINUS         &trans        &trans
        //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
            >;
        };
    };
};
